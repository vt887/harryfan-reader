name: Multi-Arch Build
permissions:
  contents: read

on:
  push:
    branches:
      - '**'

jobs:
  count:
    name: Count Swift lines
    runs-on: ["self-hosted"]
    outputs:
      sources_total: ${{ steps.count.outputs.sources_total }}
      tests_total: ${{ steps.count.outputs.tests_total }}
      all_total: ${{ steps.count.outputs.all_total }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Compute Swift line totals
        id: count
        run: |
          set -euo pipefail

          # Helper to compute total lines for a directory (0 if missing/no files)
          get_total() {
            dir="$1"
            if [ -d "$dir" ]; then
              total=$(find "$dir" -name '*.swift' -print0 | xargs -0 wc -l 2>/dev/null | tail -n1 | awk '{print $1}')
              total=${total:-0}
            else
              total=0
            fi
            echo "$total"
          }

          sources_total=$(get_total "Sources")
          tests_total=$(get_total "Tests")

          # Print numbers so they appear in the Count job logs
          echo "Swift lines by directory:"
          echo "Sources: ${sources_total}"
          echo "Tests:   ${tests_total}"

          # Compute combined total and export step outputs so job outputs are populated
          all_total=$((sources_total + tests_total))
          echo "All:     ${all_total}"

          # Export outputs for other jobs (use the special GITHUB_OUTPUT file)
          echo "sources_total=${sources_total}" >> "$GITHUB_OUTPUT"
          echo "tests_total=${tests_total}" >> "$GITHUB_OUTPUT"
          echo "all_total=${all_total}" >> "$GITHUB_OUTPUT"

  build:
    name: Build on ${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    needs: [count]
    strategy:
      matrix:
        include:
          - arch: x86_64
            runner: [ "self-hosted", "X64" ]
          - arch: arm64
            runner: [ "self-hosted", "ARM64" ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Diagnose Xcode & Swift on runner
        run: |
          echo "---- xcode-select ----"
          xcode-select -p || echo "(no xcode selected)"
          echo "---- xcodebuild version ----"
          xcodebuild -version || true
          echo "---- swift version ----"
          swift --version || true
          echo "---- SDK path (xcrun) ----"
          xcrun --sdk macosx --show-sdk-path || echo "(xcrun failed to locate SDK)"
          echo "---- list /Applications/ for Xcode ----"
          ls -la /Applications | grep Xcode || true

      - name: Build with SwiftPM
        run: |
          SDKROOT=$(xcrun --sdk macosx --show-sdk-path 2>/dev/null || true)
          echo "Using SDKROOT: $SDKROOT"
          SWIFT_FLAGS="-Xswiftc -sdk -Xswiftc $SDKROOT -Xswiftc -no-verify-emitted-module-interface"
          swift build --build-tests $SWIFT_FLAGS

  test:
    name: Test on ${{ matrix.arch }}
    runs-on: ${{ matrix.runner }}
    needs: [build]
    strategy:
      matrix:
        include:
          - arch: x86_64
            runner: [ "self-hosted", "X64" ]
          - arch: arm64
            runner: [ "self-hosted", "ARM64" ]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Test with SwiftPM
        run: |
          SDKROOT=$(xcrun --sdk macosx --show-sdk-path 2>/dev/null || true)
          echo "Using SDKROOT: $SDKROOT"
          SWIFT_FLAGS="-Xswiftc -sdk -Xswiftc $SDKROOT -Xswiftc -no-verify-emitted-module-interface"
          swift test $SWIFT_FLAGS || true
